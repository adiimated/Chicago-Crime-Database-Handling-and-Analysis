# -*- coding: utf-8 -*-
"""Normalization_crime_data.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1R8rJStapWfi9clbvGaeHcyUjrHsvJGTn

## REMOVING UNWANTED COLUMNS

### Why did I remove some columns at this stage?
1. To Reduce Query Complexity
2. Based on Relevance to Analysis
"""

from google.colab import drive
drive.mount('/content/drive')

import sqlite3

# Replace this with the path to your crimes.db file
path_to_db = '/content/drive/MyDrive/crimes/crimes.db'

import sqlite3

def create_connection(db_file):
    """ Create a database connection to the SQLite database """
    conn = None
    try:
        conn = sqlite3.connect(db_file)
    except Exception as e:
        print(e)
    return conn

def drop_columns(cursor):
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS TempCrimes (
            id INTEGER,
            date TEXT,
            block TEXT,
            iucr TEXT,
            primary_type TEXT,
            description TEXT,
            location_description TEXT,
            arrest INTEGER,
            domestic INTEGER,
            district INTEGER,
            ward INTEGER,
            community_area INTEGER,
            fbi_code TEXT,
            year INTEGER,
            location TEXT
        );
    ''')

    # Copy data from the original Crimes table to TempCrimes, excluding the columns to be dropped
    cursor.execute('''
        INSERT INTO TempCrimes (id, date, block, iucr, primary_type, description, location_description,
                                arrest, domestic, district, ward, community_area, fbi_code, year, location)
        SELECT id, date, block, iucr, primary_type, description, location_description,
               arrest, domestic, district, ward, community_area, fbi_code, year, location
        FROM Crimes;
    ''')

    # Drop the original Crimes table
    cursor.execute("DROP TABLE Crimes;")

    # Rename TempCrimes to Crimes
    cursor.execute("ALTER TABLE TempCrimes RENAME TO Crimes;")

def main():
    # Connect to the SQLite database
    conn = create_connection(path_to_db)

    try:
        cursor = conn.cursor()

        drop_columns(cursor)
        conn.commit()
        print("Specified columns dropped and data transferred successfully.")
    except Exception as e:
        print(f"An error occurred: {e}")
    finally:
        # Close the database connection
        conn.close()

if __name__ == "__main__":
    main()

import sqlite3

def print_first_five_rows(cursor):
    """ Print the first five rows of the Crimes table """
    cursor.execute("SELECT * FROM Crimes LIMIT 5;")
    rows = cursor.fetchall()
    for row in rows:
        print(row)


conn = create_connection(path_to_db)
cursor = conn.cursor()

print("First five rows of the modified Crimes table:")
print_first_five_rows(cursor)
conn.close()

conn.close()

"""## NORMALIZATION

### Database Schema:

Location Table

    Table: Location
    Columns Present:
        location_id: INTEGER PRIMARY KEY AUTOINCREMENT
        block: TEXT
        location_description: TEXT

Offense Table

    Table: Offense
    Columns Present:
        offense_id: INTEGER PRIMARY KEY AUTOINCREMENT
        iucr: TEXT
        primary_type: TEXT
        description: TEXT

Crime Table

    Table: Crime
    Columns Present:
        id: INTEGER PRIMARY KEY
        date: TEXT
        location_id: INTEGER (Foreign Key referencing Location.location_id)
        offense_id: INTEGER (Foreign Key referencing Offense.offense_id)
        arrest: INTEGER
        domestic: INTEGER
        district: INTEGER
        ward: INTEGER
        community_area: INTEGER
        year: INTEGER
"""

import sqlite3

# Connection
def create_connection(db_file):
    """ Create a database connection to the SQLite database specified by db_file """
    try:
        conn = sqlite3.connect(db_file)
        return conn
    except Exception as e:
        print(e)
        return None

# Creating tables
#-------------------------------------------------------------------------------
def create_location_table(cursor):
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS Location (
            location_id INTEGER PRIMARY KEY AUTOINCREMENT,
            block TEXT,
            location_description TEXT
        );
    ''')

def create_offense_table(cursor):
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS Offense (
            offense_id INTEGER PRIMARY KEY AUTOINCREMENT,
            iucr TEXT,
            primary_type TEXT,
            description TEXT
        );
    ''')

def create_crime_table(cursor):
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS Crime (
            crime_id INTEGER PRIMARY KEY AUTOINCREMENT,
            date TEXT,
            location_id INTEGER,
            offense_id INTEGER,
            arrest INTEGER,
            domestic INTEGER,
            district INTEGER,
            ward INTEGER,
            community_area INTEGER,
            year INTEGER,
            FOREIGN KEY (location_id) REFERENCES Location (location_id),
            FOREIGN KEY (offense_id) REFERENCES Offense (offense_id)
        );
    ''')

# Getting distinct values
#-------------------------------------------------------------------------------
def get_distinct_location(cursor):
    cursor.execute("SELECT DISTINCT block, location_description FROM Crimes")
    return cursor.fetchall()

def get_distinct_offense(cursor):
    cursor.execute("SELECT DISTINCT iucr, primary_type, description FROM Crimes")
    return cursor.fetchall()

# Inserting Values
#-------------------------------------------------------------------------------
def insert_location_data(cursor, data):
    cursor.executemany("INSERT INTO Location (block, location_description) VALUES (?, ?)", data)

def insert_offense_data(cursor, data):
    cursor.executemany("INSERT INTO Offense (iucr, primary_type, description) VALUES (?, ?, ?)", data)

def insert_crime_data(cursor):
    cursor.execute("""
        INSERT INTO Crime (date, location_id, offense_id, arrest, domestic, district, ward, community_area, year)
        SELECT
            c.date,
            l.location_id,
            o.offense_id,
            c.arrest, c.domestic, c.district, c.ward, c.community_area, c.year
        FROM
            Crimes c
            JOIN Location l ON c.block = l.block AND c.location_description = l.location_description
            JOIN Offense o ON c.iucr = o.iucr AND c.primary_type = o.primary_type AND c.description = o.description
    """)

# Normalization
#-------------------------------------------------------------------------------
def main():
    conn = create_connection(path_to_db)

    if conn is not None:
        try:
            cursor = conn.cursor()

            # Create normalized tables
            create_location_table(cursor)
            create_offense_table(cursor)
            create_crime_table(cursor)
            conn.commit()
            print("Normalized tables created successfully.")

            # Populate Location and Offense tables
            insert_location_data(cursor, get_distinct_location(cursor))
            insert_offense_data(cursor, get_distinct_offense(cursor))
            conn.commit()
            print("Location and Offense tables populated successfully.")

            # Insert data into Crime table
            insert_crime_data(cursor)
            conn.commit()
            print("Crime data inserted successfully.")

        except Exception as e:
            print(f"An error occurred: {e}")
        finally:
            conn.close()
    else:
        print("Failed to create a database connection.")

if __name__ == "__main__":
    main()

import sqlite3
path_to_db = '/content/drive/MyDrive/crimes/crimes.db'
def create_connection(db_file):
    """ Create a database connection to the SQLite database specified by db_file """
    try:
        conn = sqlite3.connect(db_file)
        return conn
    except Exception as e:
        print(e)
        return None

def delete_original_crimes_table(cursor):
    """ Delete the original Crimes table """
    cursor.execute("DROP TABLE IF EXISTS Crimes;")

conn = create_connection(path_to_db)

if conn is not None:
    try:
        cursor = conn.cursor()
        delete_original_crimes_table(cursor)
        conn.commit()
        print("Original Crimes table deleted successfully.")
    except Exception as e:
        print(f"An error occurred: {e}")
    finally:
        conn.close()
else:
    print("Failed to create a database connection.")