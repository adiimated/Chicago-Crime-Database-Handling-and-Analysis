# -*- coding: utf-8 -*-
"""visualizations.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fSmH47_MYdmNsHfcMkWZ5LDN9r7KpIEP

## RECONSTRUCTING ORIGINAL DATA WITH JOIN
"""

import pandas as pd
import matplotlib.pyplot as plt
import sqlite3

# Function to create a database connection
def create_connection(db_file):
    try:
        conn = sqlite3.connect(db_file)
        return conn
    except Exception as e:
        print(e)
        return None

# Adjusted SQL query
sql_query = '''
    SELECT
        c.crime_id,
        c.date,
        l.block,
        o.iucr,
        o.primary_type,
        o.description,
        l.location_description,
        c.arrest,
        c.domestic,
        c.district,
        c.ward,
        c.community_area,
        c.year
    FROM
        Crime c
        JOIN Location l ON c.location_id = l.location_id
        JOIN Offense o ON c.offense_id = o.offense_id;
'''

# Connect to the database
db_path = '/content/drive/MyDrive/crimes/crimes.db'  # Replace with your database file path
conn = create_connection(db_path)

# Load the data into a Pandas DataFrame
if conn is not None:
    df = pd.read_sql_query(sql_query, conn)
    print("Data loaded into DataFrame.")
else:
    print("Failed to create database connection.")

print(df.head())

import matplotlib.pyplot as plt
import seaborn as sns

# Counting occurrences of each crime type
crime_type_counts = df['primary_type'].value_counts()

# Plotting
plt.figure(figsize=(12, 8))
sns.barplot(x=crime_type_counts.index, y=crime_type_counts.values)
plt.xticks(rotation=90)
plt.xlabel('Crime Type')
plt.ylabel('Frequency')
plt.title('Frequency of Different Types of Crimes')
plt.show()

"""### By identifying the most common types of crimes, law enforcement can allocate resources and personnel more efficiently. For example, if theft is the most common crime, then efforts can be directed towards anti-theft campaigns, community education, and increased patrolling in high-theft areas."""

# Ensure 'date' is in datetime format
df['date'] = pd.to_datetime(df['date'])

# Resample by month and count occurrences
monthly_crime_counts = df.resample('M', on='date').size()
plt.figure(figsize=(12, 6))
monthly_crime_counts.plot(kind='line')
plt.xlabel('Month')
plt.ylabel('Number of Crimes')
plt.title('Monthly Crime Trends')
plt.show()

"""### There's a significant spike at the beginning, which might indicate an increase in crime reporting or a specific event that led to a surge in crimes.The monthly trends can indicate seasonal variations or the effectiveness of crime prevention strategies over time."""

import matplotlib.pyplot as plt

location_counts = df['location_description'].value_counts()
top_locations = location_counts.head(10)

plt.figure(figsize=(10, 10))
plt.pie(top_locations, labels=top_locations.index, autopct='%1.1f%%', startangle=140)
plt.title('Proportion of Crimes by Location')
plt.show()

"""### Knowing where crimes are most likely to occur can assist in strategic planning of patrols and community policing efforts. If crimes are more frequent on the streets, for instance, then improving street lighting and increasing police foot patrols could be beneficial."""

def plot_top_15_arrests_by_crime_type(df):
    arrest_data = df.groupby(['primary_type', 'arrest']).size().unstack(fill_value=0)

    # Sort the data based on the total number of cases for each crime type
    arrest_data['total'] = arrest_data.sum(axis=1)
    arrest_data_sorted = arrest_data.sort_values(by='total', ascending=False)

    # Selecting top 15 crime types for the plot
    arrest_data_top_15 = arrest_data_sorted.head(15)

    arrest_data_top_15.drop(columns='total').plot(kind='bar', stacked=True, figsize=(12, 6))
    plt.title('Top 15 Crime Types: Arrests vs. Non-Arrests')
    plt.xlabel('Type of Crime')
    plt.ylabel('Number of Cases')
    plt.xticks(rotation=45)
    plt.legend(title='Arrest Made', labels=['No', 'Yes'])
    plt.show()

plot_top_15_arrests_by_crime_type(df)

"""### Comparing arrest rates with the number of reported incidents for various crimes can highlight the effectiveness of law enforcement or the challenges in prosecuting certain crimes. Theft and battery have the highest number of cases but also a significant proportion of non-arrests. Narcotics-related crimes seem to have a relatively higher arrest rate compared to other crimes."""

def plot_bubble_chart_crimes_by_community(df):
    bubble_data = df.groupby(['community_area', 'primary_type']).size().reset_index(name='counts')
    plt.figure(figsize=(12, 6))
    sns.scatterplot(data=bubble_data, x="community_area", y="primary_type", size="counts", legend=False, sizes=(20, 200))
    plt.title('Crime Types in Community Areas')
    plt.xlabel('Community Area')
    plt.ylabel('Type of Crime')
    plt.show()

plot_bubble_chart_crimes_by_community(df)

"""### Distribution of different types of crimes across various community areas: Each dot represents the presence of a crime type in a community area. Some types of crimes are widespread across almost all areas (such as theft and battery), while others are more localized like ritualism."""